import json
import datetime
import os


class TaskManager:
    def __init__(self, filename="tasks.json"):
        self.filename = filename
        self.tasks = []
        self.load_tasks()

    def load_tasks(self):
        try:
            if os.path.exists(self.filename):
                with open(self.filename, "r", encoding="utf-8") as file:
                    self.tasks = json.load(file)
                    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.tasks)} –∑–∞–¥–∞—á")
            else:
                self.tasks = []
                print("üìù –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        except (json.JSONDecodeError, FileNotFoundError) as e:
            self.tasks = []
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")

    def save_tasks(self):
        try:
            with open(self.filename, "w", encoding="utf-8") as file:
                json.dump(self.tasks, file, indent=4, ensure_ascii=False)
            print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(self.tasks)} –∑–∞–¥–∞—á")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")

    def add_task(self):
        if self.tasks:
            id = max(task["id"] for task in self.tasks) + 1
        else:
            id = 1
        text = input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ: ")
        if not text:
            print("‚ö†Ô∏è –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
            return
        created_at = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        task_info = {
            "id": id,
            "text": text,
            "completed": False,
            "created_at": created_at,
        }
        self.tasks.append(task_info)
        self.save_tasks()
        print("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–¥–∞–Ω–∞")

    def show_tasks(self):
        if not self.tasks:
            print("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return

        print("\n" + "=" * 60)
        print("üìã –°–ü–ò–°–û–ö –ó–ê–î–ê–ß")
        print("=" * 60)

        for task in self.tasks:
            status = "‚úÖ" if task["completed"] else "‚¨ú"
            print(f"{status} [{task['id']:3}] {task['text']}")
            print(f"        –°—Ç–≤–æ—Ä–µ–Ω–æ: {task['created_at']}")
            print("-" * 60)

        completed = sum(1 for task in self.tasks if task["completed"])
        print(
            f"\nüìä –í—Å—å–æ–≥–æ: {len(self.tasks)} | –í–∏–∫–æ–Ω–∞–Ω–æ: {completed} | –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {len(self.tasks) - completed}"
        )

    def complete_task(self):
        try:
            task_id = int(input("–í–≤–µ–¥—ñ—Ç—å ID –∑–∞–¥–∞—á—ñ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: "))
        except ValueError:
            print("‚ö†Ô∏è ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
            return
        for task in self.tasks:
            if task["id"] == task_id:
                if task["completed"]:
                    print("‚ÑπÔ∏è –¶—è –∑–∞–¥–∞—á–∞ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞")
                else:
                    task["completed"] = True
                    self.save_tasks()
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –≤—ñ–¥–º—ñ—á–µ–Ω–∞ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∞")
                return
        print(f"‚ùå –ó–∞–¥–∞—á–∞ –∑ ID {task_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

    def delete_task(self):
        try:
            task_id = int(input("–í–≤–µ–¥—ñ—Ç—å ID –∑–∞–¥–∞—á—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: "))
        except ValueError:
            print("‚ö†Ô∏è ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
            return
        for task in self.tasks:
            if task["id"] == task_id:
                self.tasks.remove(task)
                self.save_tasks()
                print(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ #{task_id} –≤–∏–¥–∞–ª–µ–Ω–∞")
                return
        print(f"‚ùå –ó–∞–¥–∞—á–∞ –∑ ID {task_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
